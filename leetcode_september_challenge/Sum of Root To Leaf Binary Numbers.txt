Sum of Root To Leaf Binary Numbers

#java solution

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<String> list;
    public int sumRootToLeaf(TreeNode root) {
        if(root == null)
            return 0;
        list = new ArrayList();
        dfs("", root);
        
        int sum = 0;
        for(String str: list){
            sum += binaryStringToInt(str);
        }
        
        return sum;
    }
    
    private void dfs(String num, TreeNode root){
        if(root == null)
            return;
        if(root.left == null && root.right == null){
            num += root.val;
            list.add(num);
            return;
        }
        dfs(num + root.val, root.left);
        dfs(num + root.val, root.right);  
    }
    
    private int binaryStringToInt(String num){
        int len = num.length() - 1;
        int pow = len;
        int sum = 0;
        while(pow != -1){
            if(num.charAt(len - pow) == '1'){
                sum += Math.pow(2, pow);
            }
            pow--;
        }
        return sum;
    }
}